generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
  SUSPENDED
}

enum ShopStatus {
  ACTIVE
  BLOCKED
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  password     String
  phoneNumber  String
  address      String
  profilePhoto String?
  status       UserStatus @default(ACTIVE)
  role         UserRole   @default(CUSTOMER)
  isDeleted    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  shop     Shop?
  review   Review[]
  followed Followed[]

  orders     Order[]
  payments   Payment[]
}

model Categories {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  images      String?
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product[]
}

model Shop {
  id       String @id @default(uuid())
  vendorId String @unique
  vendor   User   @relation(fields: [vendorId], references: [id])

  name          String
  logo          String
  description   String
  followerCount Int        @default(0)
  status        ShopStatus @default(ACTIVE)

  isDeleted Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  product   Product[]
  followed  Followed[]
  coupon    Coupon?
  orders    Order[]
}

model Product {
  id     String @id @default(uuid())
  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  name       String
  price      Int
  categoryId String
  categories Categories @relation(fields: [categoryId], references: [id])

  inventoryCount Int    @default(0)
  images         String
  description    String
  discount       Int    @default(0)
  rating         Int    @default(0)

  startDate    DateTime?
  endDate      DateTime?
  isFlashSales Boolean   @default(false)

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review     Review[]
  orderItems OrderItem[]
}

model Review {
  id         String @id @default(uuid())
  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  rating     Decimal @default(0)
  reviewText String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Followed {
  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  @@id([customerId, shopId]) // composed key
  @@map("followed")
}

model Coupon {
  id     String @id @default(uuid())
  shopId String @unique
  shop   Shop   @relation(fields: [shopId], references: [id])

  code     String
  discount Int    @default(0)

  validFrom DateTime
  validTo   DateTime

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String @id @default(uuid())
  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  totalPrice       Float
  discountedAmount Float?
  discount         Float  @default(0)

  grandTotal Float
  status     OrderStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]
  payments   Payment[]
}

model OrderItem {
  id      String @id @default(uuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity   Int
  price      Float
  grandTotal Float
  discount   Float @default(0)
}

model Payment {
  id String @id @default(uuid())

  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  amount        Float
  transactionId String

  status    PaymentStatus
  createdAt DateTime      @default(now())
}

