generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
  SUSPENDED
}

enum ShopStatus {
  ACTIVE
  BLOCKED
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  password     String
  phoneNumber  String
  address      String
  profilePhoto String?
  status       UserStatus @default(ACTIVE)
  role         UserRole   @default(CUSTOMER)
  isDeleted    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  shop         Shop?
  review       Review[]
}

model Categories {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  images      String?
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product[]
}

model Shop {
  id       String @id @default(uuid())
  vendorId String @unique
  vendor   User   @relation(fields: [vendorId], references: [id])

  name          String
  logo          String
  description   String
  followerCount Int        @default(0)
  status        ShopStatus @default(ACTIVE)

  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
}

model Product {
  id     String @id @default(uuid())
  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  name       String
  price      Int
  categoryId String
  categories Categories @relation(fields: [categoryId], references: [id])

  inventoryCount Int    @default(0)
  images         String
  description    String
  discount       Int    @default(0)
  rating         Int    @default(0)

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review[]
}

model Review {
  id         String @id @default(uuid())
  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  rating     Decimal @default(0)
  reviewText String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
